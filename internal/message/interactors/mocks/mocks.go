// Code generated by MockGen. DO NOT EDIT.
// Source: stt.go
//
// Generated by this command:
//
//	mockgen -source=stt.go -typed -package=mocks -destination=./mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/BobrePatre/grouse-backend/internal/message/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationGateway is a mock of NotificationGateway interface.
type MockNotificationGateway struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationGatewayMockRecorder
}

// MockNotificationGatewayMockRecorder is the mock recorder for MockNotificationGateway.
type MockNotificationGatewayMockRecorder struct {
	mock *MockNotificationGateway
}

// NewMockNotificationGateway creates a new mock instance.
func NewMockNotificationGateway(ctrl *gomock.Controller) *MockNotificationGateway {
	mock := &MockNotificationGateway{ctrl: ctrl}
	mock.recorder = &MockNotificationGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationGateway) EXPECT() *MockNotificationGatewayMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockNotificationGateway) Notify(ctx context.Context, notification *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotificationGatewayMockRecorder) Notify(ctx, notification any) *MockNotificationGatewayNotifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotificationGateway)(nil).Notify), ctx, notification)
	return &MockNotificationGatewayNotifyCall{Call: call}
}

// MockNotificationGatewayNotifyCall wrap *gomock.Call
type MockNotificationGatewayNotifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationGatewayNotifyCall) Return(arg0 error) *MockNotificationGatewayNotifyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationGatewayNotifyCall) Do(f func(context.Context, *entity.Message) error) *MockNotificationGatewayNotifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationGatewayNotifyCall) DoAndReturn(f func(context.Context, *entity.Message) error) *MockNotificationGatewayNotifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
