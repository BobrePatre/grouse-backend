// Code generated by MockGen. DO NOT EDIT.
// Source: tts.go
//
// Generated by this command:
//
//	mockgen -source=tts.go -typed -package=mocks -destination=./mocks/tts_mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/BobrePatre/grouse-backend/internal/message/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationTtsGateway is a mock of NotificationTtsGateway interface.
type MockNotificationTtsGateway struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationTtsGatewayMockRecorder
}

// MockNotificationTtsGatewayMockRecorder is the mock recorder for MockNotificationTtsGateway.
type MockNotificationTtsGatewayMockRecorder struct {
	mock *MockNotificationTtsGateway
}

// NewMockNotificationTtsGateway creates a new mock instance.
func NewMockNotificationTtsGateway(ctrl *gomock.Controller) *MockNotificationTtsGateway {
	mock := &MockNotificationTtsGateway{ctrl: ctrl}
	mock.recorder = &MockNotificationTtsGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationTtsGateway) EXPECT() *MockNotificationTtsGatewayMockRecorder {
	return m.recorder
}

// NotifyClient mocks base method.
func (m *MockNotificationTtsGateway) NotifyClient(ctx context.Context, notification *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyClient", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyClient indicates an expected call of NotifyClient.
func (mr *MockNotificationTtsGatewayMockRecorder) NotifyClient(ctx, notification any) *MockNotificationTtsGatewayNotifyClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyClient", reflect.TypeOf((*MockNotificationTtsGateway)(nil).NotifyClient), ctx, notification)
	return &MockNotificationTtsGatewayNotifyClientCall{Call: call}
}

// MockNotificationTtsGatewayNotifyClientCall wrap *gomock.Call
type MockNotificationTtsGatewayNotifyClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationTtsGatewayNotifyClientCall) Return(arg0 error) *MockNotificationTtsGatewayNotifyClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationTtsGatewayNotifyClientCall) Do(f func(context.Context, *entity.Message) error) *MockNotificationTtsGatewayNotifyClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationTtsGatewayNotifyClientCall) DoAndReturn(f func(context.Context, *entity.Message) error) *MockNotificationTtsGatewayNotifyClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
